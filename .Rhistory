library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
fgsdbhjfg, ehgfsdchjdg, ajkhsdchf
465, 56746, 4365
log(14)
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
}
outcomes <- choose(10, 5)
pmf <- function(y) {
output <- (choose(y, 5) / outcomes) - (choose(y-1, 5) / outcomes)
return(output)
}
meanY <- function() {
expectation <- 0
for(y in range(5, 10)) {
expectation <- expectation + y * pmf(y)
}
return(expectation)
}
meanY
meanY()
varianceY <- function(){
expec_seq <- meanY(1) ** 2
expec_for_seq <- meanY(2)
return(expec_for_seq - expec_seq)
}
meanY(1)
outcomes <- choose(10, 5)
pmf <- function(y) {
output <- (choose(y, 5) / outcomes) - (choose(y-1, 5) / outcomes)
return(output)
}
meanY <- function(pwr) {
expectation <- 0
for(y in range(5, 10)) {
expectation <- expectation + (y ** pwr) * pmf(y)
}
return(expectation)
}
meanY(1)
varianceY <- function(){
expec_seq <- meanY(1) ** 2
expec_for_seq <- meanY(2)
return(expec_for_seq - expec_seq)
}
meanY(1)
varianceY()
hubble <- data.frame(distance = c(557.2,531.4,477.7,446.2,464.8,473.6,655.0,478.2,492.1,500.7,582.1),
velocity = c(39369.3,35012.1,25467.9,23698.8,32488.2,24133.5,
43787.7,22999.5,23451.0,33501.0,24562.8))
x <- hubble$distance
y <- hubble$velocity
mean(x)
x_bar = mean(x)
y_bar = mean(y)
sd_x = sd(x)
sd_y = sd(y)
cov_xy = cov(x, y)
corr_xy = cor(x,y)
print(x_bar)
print(y_bar)
print(sd_x)
print(sd_y)
print(cov_xy)
print(corr_xy)
reg <- lm(y~x)
broom::tidy(reg, conf.int=TRUE)
resid_sd <- sqrt((sum(reg$residuals^2)) / (n-2))
n = length(x)
resid_sd <- sqrt((sum(reg$residuals^2)) / (n-2))
print(resid_sd)
reg
print(reg)
sd_B1 <- resid_sd / (sqrt(n-1)*sd_x)
print(sd_B1)
reg$coefficients
reg$coefficients[1]
reg$coefficients[2]
up_<-reg$coefficients[2] -qt(0.975, n-2) * sd_B1
lwr_CI <- reg$coefficients[2] -qt(0.975, n-2) * sd_B1
print(lwr_CI)
up_<-reg$coefficients[2] -qt(0.975, n-2) * sd_B1
print(up)
print(up_)
up_<-reg$coefficients[2] +qt(0.975, n-2) * sd_B1
print(up_)
plot(x, y)
abline(reg)
sd_B1 <- resid_sd / (sqrt(n-2)*sd_x)
print(sd_B1)
resid_sd <- sqrt((sum(reg$residuals^2)) / (n-2))
print(resid_sd)
reg$coefficients
print(cov_xy)
sum(reg$residuals)
resid <- reg$residuals
resid_sd <- sqrt((sum(resid^2))/(n-2))
sum(reg$residuals)
print(resid_sd)
x=c(-0.063114, -0.03538, -0.005977, 0.046451, 0.010618, -0.089884, -0.009908, 0.012117, -0.095181, -0.185636, -0.077798, 0.007791, -0.08955, -0.116457, 0.081953, 0.089772, 0.051721, 0.000196, 0.071522, 0.033009, 0.0351, -0.01996, 0.055779, 0.017615, -0.037675, 0.028115, 0.057133, 0.014651, -0.085532, -0.055388, 0.066516, -0.048612, 0.083928, 0.036193, -0.002293, 0.063257, 0.022393, 0.031457, -0.001048, 0.028097, -0.013593, -0.018426, -0.021708, -0.058467, -0.074467, 0.102307, -0.005071, 0.008497)
y=c(-0.231652, -0.039752, -0.145924, 0.00243, 0.023643, -0.02295, -0.136009, 0.080806, -0.111441, -0.019426, -0.147219, 0.143455, -0.062669, -0.165514, 0.117081, -0.098828, 0.129259, 0.027767, 0.070758, 0.077571, -0.013032, -0.022631, 0.157752, 0.01936, 0.043661, -0.034447, 0.02299, -0.063771, -0.039316, 0.048148, -0.014649, 0.020381, 0.056224, -0.013762, -0.051921, 0.055139, -0.083019, -0.018317, 0.024927, 0.085363, 0.022041, -0.029711, -0.033271, -0.030647, -0.000342, 0.053617, 0.035673, 0.064812)
model <- lm(y~x)
broom::tidy(model, conf.int=TRUE) %>%
round(., 3)
install.packages("dplyr")
library(dplyr)
model <- lm(y~x)
broom::tidy(model, conf.int=TRUE) %>%
round(., 3)
broom::tidy(model, conf.int=TRUE)
xnext=c(0.04266, 0.039787, 0.030852, -0.007526, -0.064699, 0.038793, 0.012519, 0.019571, 0.023947, -0.019988)
t_ <- qt(0.975, length(x) - 2)
t_
preds <- predict(model, newdata = data.frame(xnext), interval = "prediction", level=0.95)
print(preds)
resid_var <- var(model$residuals)
resid_var <- sum(model$residuals^2) / (n - 2)
first_10_y <- y[0:10]
length(y)
length(first_10_y)
preds <- predict(first_10_y)
preds <- predict(model, first_10_y)
preds <- predict(model, data.frame(first_10_y))
den_sum <- sum((x- mean(x))^2)
pred_int <- data.frame(
lower_int = preds - t_ * sqrt(resid_var * (1 + 1/n + ((xnext - mean(x))^2 / den_sum))),
upper_int = preds + t_ * sqrt(resid_var * (1 + 1/n + ((xnext - mean(x))^2 / den_sum)))
)
print(pred_int)
length(preds)
preds <- predict(model, data.frame(y))
pred_int <- data.frame(
lower_int = preds - t_ * sqrt(resid_var * (1 + 1/n + ((xnext - mean(x))^2 / den_sum))),
upper_int = preds + t_ * sqrt(resid_var * (1 + 1/n + ((xnext - mean(x))^2 / den_sum)))
)
print(pred_int)
algal = read.table("algalbloom.txt")
setwd("~/Desktop/OneDrive - UBC/UBC/YEAR 3/STAT 306/Labs/lab 4")
algal = read.table("algalbloom.txt")
algal = read.table("algalbloom.txt", sep=",")
algal
algal = read.table("algalbloom.txt", sep=",", header = TRUE)
algal
plot(algal$Alg_Conc, algal$Oxy_Conc)
reg <- lm(Alg_Conc ~ Oxy_Conc, data=algal)
summary(reg)
reg <- lm(Oxy_Conc~Alg_Conc, data=algal)
summary(reg)
res_sd = sd(reg$residuals)
x_sd = sd(algal$Alg_Conc)
n = length(algal$Alg_Conc)
se_B1 = res_sd / (x_sd * sqrt(n - 1))
print(se_B1)
res_se = 0.6369
x_sd = sd(algal$Alg_Conc)
se_B1 = res_se / (x_sd * sqrt(n - 1))
print(se_B1)
vcov(reg)
summary(reg)
0.1342 ^2
0.2216 ^2
algal = read.table("algalbloom.txt", sep=",", header = TRUE)
0.04910416 + 2^2 * 0.01799669 + 2 * 2 * -0.02349141
plot(xx, dnorm(xx), type='l')
xx = seq(-5, 5, length.out=100)
plot(xx, dnorm(xx), type='l')
lines(xx, dt(xx,1), col='red')
lines(xx, dt(xx,2), col="green")
lines(xx, dt(xx,10), col="green")
qt(0.975, 1)
qt(0.975, 10)
setwd("~/Desktop/OneDrive - UBC/UBC/YEAR 3/STAT 306/group project")
read.csv("Car_sales.csv")
car_data <- read.csv("Car_sales.csv")
plot(car_data$Sales_in_thousands, car_data$Engine_size)
plot(car_data$Sales_in_thousands, car_data$Fuel_efficiency)
plot(car_data$Sales_in_thousands, car_data$Price_in_thousands)
plot(car_data$Sales_in_thousands, car_data$Length)
plot(car_data$Length, car_data$Sales_in_thousands)
plot(car_data$Length, car_data$Horsepower)
plot(car_data$Length, car_data$Sales_in_thousands)
plot(car_data$Horsepower, car_data$Sales_in_thousands)
plot(car_data$Engine_size, car_data$Sales_in_thousands)
plot(car_data$Power_perf_factor, car_data$Sales_in_thousands)
